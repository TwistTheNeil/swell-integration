// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnimationDataSerializer/modeldata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modeldata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swellanimations {

namespace {

const ::google::protobuf::Descriptor* Animation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Animation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto() {
  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AnimationDataSerializer/modeldata.proto");
  GOOGLE_CHECK(file != NULL);
  Animation_descriptor_ = file->message_type(0);
  static const int Animation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, frames_),
  };
  Animation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Animation_descriptor_,
      Animation::default_instance_,
      Animation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Animation));
  ModelData_descriptor_ = file->message_type(1);
  static const int ModelData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, controlpoints_),
  };
  ModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelData_descriptor_,
      ModelData::default_instance_,
      ModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelData));
  Vector_descriptor_ = file->message_type(2);
  static const int Vector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  };
  Vector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector));
  Node_descriptor_ = file->message_type(3);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, eularangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parent_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Animation_descriptor_, &Animation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelData_descriptor_, &ModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto() {
  delete Animation::default_instance_;
  delete Animation_reflection_;
  delete ModelData::default_instance_;
  delete ModelData_reflection_;
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
}

void protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'AnimationDataSerializer/modeldata.prot"
    "o\022\017swellanimations\"2\n\tAnimation\022%\n\006frame"
    "s\030\001 \003(\0132\025.swellanimations.Node\"a\n\tModelD"
    "ata\022$\n\005model\030\001 \001(\0132\025.swellanimations.Nod"
    "e\022.\n\rcontrolPoints\030\002 \003(\0132\027.swellanimatio"
    "ns.Vector\")\n\006Vector\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002("
    "\002\022\t\n\001z\030\003 \002(\002\"\275\001\n\004Node\022\014\n\004name\030\001 \001(\t\022)\n\010p"
    "osition\030\002 \001(\0132\027.swellanimations.Vector\022,"
    "\n\013eularAngles\030\003 \001(\0132\027.swellanimations.Ve"
    "ctor\022\'\n\010children\030\004 \003(\0132\025.swellanimations"
    ".Node\022%\n\006parent\030\005 \001(\0132\025.swellanimations."
    "Node", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AnimationDataSerializer/modeldata.proto", &protobuf_RegisterTypes);
  Animation::default_instance_ = new Animation();
  ModelData::default_instance_ = new ModelData();
  Vector::default_instance_ = new Vector();
  Node::default_instance_ = new Node();
  Animation::default_instance_->InitAsDefaultInstance();
  ModelData::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AnimationDataSerializer_2fmodeldata_2eproto {
  StaticDescriptorInitializer_AnimationDataSerializer_2fmodeldata_2eproto() {
    protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  }
} static_descriptor_initializer_AnimationDataSerializer_2fmodeldata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Animation::kFramesFieldNumber;
#endif  // !_MSC_VER

Animation::Animation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:swellanimations.Animation)
}

void Animation::InitAsDefaultInstance() {
}

Animation::Animation(const Animation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:swellanimations.Animation)
}

void Animation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Animation::~Animation() {
  // @@protoc_insertion_point(destructor:swellanimations.Animation)
  SharedDtor();
}

void Animation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Animation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Animation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Animation_descriptor_;
}

const Animation& Animation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  return *default_instance_;
}

Animation* Animation::default_instance_ = NULL;

Animation* Animation::New() const {
  return new Animation;
}

void Animation::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Animation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:swellanimations.Animation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swellanimations.Node frames = 1;
      case 1: {
        if (tag == 10) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:swellanimations.Animation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:swellanimations.Animation)
  return false;
#undef DO_
}

void Animation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:swellanimations.Animation)
  // repeated .swellanimations.Node frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:swellanimations.Animation)
}

::google::protobuf::uint8* Animation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:swellanimations.Animation)
  // repeated .swellanimations.Node frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:swellanimations.Animation)
  return target;
}

int Animation::ByteSize() const {
  int total_size = 0;

  // repeated .swellanimations.Node frames = 1;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Animation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Animation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Animation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Animation::MergeFrom(const Animation& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Animation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Animation::CopyFrom(const Animation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void Animation::Swap(Animation* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Animation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Animation_descriptor_;
  metadata.reflection = Animation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelData::kModelFieldNumber;
const int ModelData::kControlPointsFieldNumber;
#endif  // !_MSC_VER

ModelData::ModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:swellanimations.ModelData)
}

void ModelData::InitAsDefaultInstance() {
  model_ = const_cast< ::swellanimations::Node*>(&::swellanimations::Node::default_instance());
}

ModelData::ModelData(const ModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:swellanimations.ModelData)
}

void ModelData::SharedCtor() {
  _cached_size_ = 0;
  model_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelData::~ModelData() {
  // @@protoc_insertion_point(destructor:swellanimations.ModelData)
  SharedDtor();
}

void ModelData::SharedDtor() {
  if (this != default_instance_) {
    delete model_;
  }
}

void ModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelData_descriptor_;
}

const ModelData& ModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  return *default_instance_;
}

ModelData* ModelData::default_instance_ = NULL;

ModelData* ModelData::New() const {
  return new ModelData;
}

void ModelData::Clear() {
  if (has_model()) {
    if (model_ != NULL) model_->::swellanimations::Node::Clear();
  }
  controlpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:swellanimations.ModelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .swellanimations.Node model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_controlPoints;
        break;
      }

      // repeated .swellanimations.Vector controlPoints = 2;
      case 2: {
        if (tag == 18) {
         parse_controlPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_controlpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_controlPoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:swellanimations.ModelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:swellanimations.ModelData)
  return false;
#undef DO_
}

void ModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:swellanimations.ModelData)
  // optional .swellanimations.Node model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model(), output);
  }

  // repeated .swellanimations.Vector controlPoints = 2;
  for (int i = 0; i < this->controlpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controlpoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:swellanimations.ModelData)
}

::google::protobuf::uint8* ModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:swellanimations.ModelData)
  // optional .swellanimations.Node model = 1;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model(), target);
  }

  // repeated .swellanimations.Vector controlPoints = 2;
  for (int i = 0; i < this->controlpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->controlpoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:swellanimations.ModelData)
  return target;
}

int ModelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .swellanimations.Node model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }

  }
  // repeated .swellanimations.Vector controlPoints = 2;
  total_size += 1 * this->controlpoints_size();
  for (int i = 0; i < this->controlpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->controlpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelData::MergeFrom(const ModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  controlpoints_.MergeFrom(from.controlpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      mutable_model()->::swellanimations::Node::MergeFrom(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelData::CopyFrom(const ModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelData::IsInitialized() const {

  if (has_model()) {
    if (!this->model().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->controlpoints())) return false;
  return true;
}

void ModelData::Swap(ModelData* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    controlpoints_.Swap(&other->controlpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelData_descriptor_;
  metadata.reflection = ModelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:swellanimations.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:swellanimations.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:swellanimations.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:swellanimations.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:swellanimations.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:swellanimations.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:swellanimations.Vector)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:swellanimations.Vector)
}

::google::protobuf::uint8* Vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:swellanimations.Vector)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:swellanimations.Vector)
  return target;
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kNameFieldNumber;
const int Node::kPositionFieldNumber;
const int Node::kEularAnglesFieldNumber;
const int Node::kChildrenFieldNumber;
const int Node::kParentFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:swellanimations.Node)
}

void Node::InitAsDefaultInstance() {
  position_ = const_cast< ::swellanimations::Vector*>(&::swellanimations::Vector::default_instance());
  eularangles_ = const_cast< ::swellanimations::Vector*>(&::swellanimations::Vector::default_instance());
  parent_ = const_cast< ::swellanimations::Node*>(&::swellanimations::Node::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:swellanimations.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  eularangles_ = NULL;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:swellanimations.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete eularangles_;
    delete parent_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::swellanimations::Vector::Clear();
    }
    if (has_eularangles()) {
      if (eularangles_ != NULL) eularangles_->::swellanimations::Vector::Clear();
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::swellanimations::Node::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:swellanimations.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .swellanimations.Vector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_eularAngles;
        break;
      }

      // optional .swellanimations.Vector eularAngles = 3;
      case 3: {
        if (tag == 26) {
         parse_eularAngles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eularangles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_children;
        break;
      }

      // repeated .swellanimations.Node children = 4;
      case 4: {
        if (tag == 34) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_children;
        if (input->ExpectTag(42)) goto parse_parent;
        break;
      }

      // optional .swellanimations.Node parent = 5;
      case 5: {
        if (tag == 42) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:swellanimations.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:swellanimations.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:swellanimations.Node)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .swellanimations.Vector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional .swellanimations.Vector eularAngles = 3;
  if (has_eularangles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->eularangles(), output);
  }

  // repeated .swellanimations.Node children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->children(i), output);
  }

  // optional .swellanimations.Node parent = 5;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:swellanimations.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:swellanimations.Node)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .swellanimations.Vector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional .swellanimations.Vector eularAngles = 3;
  if (has_eularangles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->eularangles(), target);
  }

  // repeated .swellanimations.Node children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->children(i), target);
  }

  // optional .swellanimations.Node parent = 5;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:swellanimations.Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .swellanimations.Vector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .swellanimations.Vector eularAngles = 3;
    if (has_eularangles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eularangles());
    }

    // optional .swellanimations.Node parent = 5;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  // repeated .swellanimations.Node children = 4;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::swellanimations::Vector::MergeFrom(from.position());
    }
    if (from.has_eularangles()) {
      mutable_eularangles()->::swellanimations::Vector::MergeFrom(from.eularangles());
    }
    if (from.has_parent()) {
      mutable_parent()->::swellanimations::Node::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_eularangles()) {
    if (!this->eularangles().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->children())) return false;
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(eularangles_, other->eularangles_);
    children_.Swap(&other->children_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace swellanimations

// @@protoc_insertion_point(global_scope)
