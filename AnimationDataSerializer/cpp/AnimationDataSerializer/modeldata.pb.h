// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnimationDataSerializer/modeldata.proto

#ifndef PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED
#define PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace swellanimations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto();
void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto();

class Animation;
class Node;

// ===================================================================

class Animation : public ::google::protobuf::Message {
 public:
  Animation();
  virtual ~Animation();

  Animation(const Animation& from);

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Animation& default_instance();

  void Swap(Animation* other);

  // implements Message ----------------------------------------------

  Animation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Animation& from);
  void MergeFrom(const Animation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .swellanimations.Node frames = 1;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 1;
  inline const ::swellanimations::Node& frames(int index) const;
  inline ::swellanimations::Node* mutable_frames(int index);
  inline ::swellanimations::Node* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
      mutable_frames();

  // optional int32 framesPerSecond = 2;
  inline bool has_framespersecond() const;
  inline void clear_framespersecond();
  static const int kFramesPerSecondFieldNumber = 2;
  inline ::google::protobuf::int32 framespersecond() const;
  inline void set_framespersecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:swellanimations.Animation)
 private:
  inline void set_has_framespersecond();
  inline void clear_has_framespersecond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Node > frames_;
  ::google::protobuf::int32 framespersecond_;
  friend void  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto();

  void InitAsDefaultInstance();
  static Animation* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float positionX = 2;
  inline bool has_positionx() const;
  inline void clear_positionx();
  static const int kPositionXFieldNumber = 2;
  inline float positionx() const;
  inline void set_positionx(float value);

  // optional float positionY = 3;
  inline bool has_positiony() const;
  inline void clear_positiony();
  static const int kPositionYFieldNumber = 3;
  inline float positiony() const;
  inline void set_positiony(float value);

  // optional float positionZ = 4;
  inline bool has_positionz() const;
  inline void clear_positionz();
  static const int kPositionZFieldNumber = 4;
  inline float positionz() const;
  inline void set_positionz(float value);

  // optional float rotationX = 5;
  inline bool has_rotationx() const;
  inline void clear_rotationx();
  static const int kRotationXFieldNumber = 5;
  inline float rotationx() const;
  inline void set_rotationx(float value);

  // optional float rotationY = 6;
  inline bool has_rotationy() const;
  inline void clear_rotationy();
  static const int kRotationYFieldNumber = 6;
  inline float rotationy() const;
  inline void set_rotationy(float value);

  // optional float rotationZ = 7;
  inline bool has_rotationz() const;
  inline void clear_rotationz();
  static const int kRotationZFieldNumber = 7;
  inline float rotationz() const;
  inline void set_rotationz(float value);

  // repeated .swellanimations.Node children = 8;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 8;
  inline const ::swellanimations::Node& children(int index) const;
  inline ::swellanimations::Node* mutable_children(int index);
  inline ::swellanimations::Node* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
      mutable_children();

  // optional .swellanimations.Node parent = 9;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 9;
  inline const ::swellanimations::Node& parent() const;
  inline ::swellanimations::Node* mutable_parent();
  inline ::swellanimations::Node* release_parent();
  inline void set_allocated_parent(::swellanimations::Node* parent);

  // @@protoc_insertion_point(class_scope:swellanimations.Node)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_positionx();
  inline void clear_has_positionx();
  inline void set_has_positiony();
  inline void clear_has_positiony();
  inline void set_has_positionz();
  inline void clear_has_positionz();
  inline void set_has_rotationx();
  inline void clear_has_rotationx();
  inline void set_has_rotationy();
  inline void clear_has_rotationy();
  inline void set_has_rotationz();
  inline void clear_has_rotationz();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float positionx_;
  float positiony_;
  float positionz_;
  float rotationx_;
  float rotationy_;
  float rotationz_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Node > children_;
  ::swellanimations::Node* parent_;
  friend void  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// ===================================================================


// ===================================================================

// Animation

// repeated .swellanimations.Node frames = 1;
inline int Animation::frames_size() const {
  return frames_.size();
}
inline void Animation::clear_frames() {
  frames_.Clear();
}
inline const ::swellanimations::Node& Animation::frames(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.Animation.frames)
  return frames_.Get(index);
}
inline ::swellanimations::Node* Animation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.Animation.frames)
  return frames_.Mutable(index);
}
inline ::swellanimations::Node* Animation::add_frames() {
  // @@protoc_insertion_point(field_add:swellanimations.Animation.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
Animation::frames() const {
  // @@protoc_insertion_point(field_list:swellanimations.Animation.frames)
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
Animation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.Animation.frames)
  return &frames_;
}

// optional int32 framesPerSecond = 2;
inline bool Animation::has_framespersecond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Animation::set_has_framespersecond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Animation::clear_has_framespersecond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Animation::clear_framespersecond() {
  framespersecond_ = 0;
  clear_has_framespersecond();
}
inline ::google::protobuf::int32 Animation::framespersecond() const {
  // @@protoc_insertion_point(field_get:swellanimations.Animation.framesPerSecond)
  return framespersecond_;
}
inline void Animation::set_framespersecond(::google::protobuf::int32 value) {
  set_has_framespersecond();
  framespersecond_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Animation.framesPerSecond)
}

// -------------------------------------------------------------------

// Node

// optional string name = 1;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.name)
  return *name_;
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:swellanimations.Node.name)
}
inline void Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:swellanimations.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:swellanimations.Node.name)
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.name)
  return name_;
}
inline ::std::string* Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.name)
}

// optional float positionX = 2;
inline bool Node::has_positionx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_positionx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_positionx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_positionx() {
  positionx_ = 0;
  clear_has_positionx();
}
inline float Node::positionx() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.positionX)
  return positionx_;
}
inline void Node::set_positionx(float value) {
  set_has_positionx();
  positionx_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.positionX)
}

// optional float positionY = 3;
inline bool Node::has_positiony() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_positiony() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_positiony() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_positiony() {
  positiony_ = 0;
  clear_has_positiony();
}
inline float Node::positiony() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.positionY)
  return positiony_;
}
inline void Node::set_positiony(float value) {
  set_has_positiony();
  positiony_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.positionY)
}

// optional float positionZ = 4;
inline bool Node::has_positionz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_positionz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_positionz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_positionz() {
  positionz_ = 0;
  clear_has_positionz();
}
inline float Node::positionz() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.positionZ)
  return positionz_;
}
inline void Node::set_positionz(float value) {
  set_has_positionz();
  positionz_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.positionZ)
}

// optional float rotationX = 5;
inline bool Node::has_rotationx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_rotationx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_rotationx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_rotationx() {
  rotationx_ = 0;
  clear_has_rotationx();
}
inline float Node::rotationx() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.rotationX)
  return rotationx_;
}
inline void Node::set_rotationx(float value) {
  set_has_rotationx();
  rotationx_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.rotationX)
}

// optional float rotationY = 6;
inline bool Node::has_rotationy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_rotationy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_rotationy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_rotationy() {
  rotationy_ = 0;
  clear_has_rotationy();
}
inline float Node::rotationy() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.rotationY)
  return rotationy_;
}
inline void Node::set_rotationy(float value) {
  set_has_rotationy();
  rotationy_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.rotationY)
}

// optional float rotationZ = 7;
inline bool Node::has_rotationz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_rotationz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_rotationz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_rotationz() {
  rotationz_ = 0;
  clear_has_rotationz();
}
inline float Node::rotationz() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.rotationZ)
  return rotationz_;
}
inline void Node::set_rotationz(float value) {
  set_has_rotationz();
  rotationz_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.rotationZ)
}

// repeated .swellanimations.Node children = 8;
inline int Node::children_size() const {
  return children_.size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline const ::swellanimations::Node& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.children)
  return children_.Get(index);
}
inline ::swellanimations::Node* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.children)
  return children_.Mutable(index);
}
inline ::swellanimations::Node* Node::add_children() {
  // @@protoc_insertion_point(field_add:swellanimations.Node.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
Node::children() const {
  // @@protoc_insertion_point(field_list:swellanimations.Node.children)
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.Node.children)
  return &children_;
}

// optional .swellanimations.Node parent = 9;
inline bool Node::has_parent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Node::set_has_parent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Node::clear_has_parent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Node::clear_parent() {
  if (parent_ != NULL) parent_->::swellanimations::Node::Clear();
  clear_has_parent();
}
inline const ::swellanimations::Node& Node::parent() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.parent)
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::swellanimations::Node* Node::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::swellanimations::Node;
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.parent)
  return parent_;
}
inline ::swellanimations::Node* Node::release_parent() {
  clear_has_parent();
  ::swellanimations::Node* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void Node::set_allocated_parent(::swellanimations::Node* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.parent)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace swellanimations

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED
